class ueueReservationInterface
{
    public:
        OpQueueReservationInterface() : mRef(0) {}
        virtual ~OpQueueReservationInterface() {}

        virtual size_t total() const = 0;
        virtual size_t available() const = 0;
        virtual size_t used() const = 0;

    private:
        boost::atomic<uint32_t> mRef;

        virtual void dispose() { delete this; }

        friend void intrusive_ptr_add_ref(OpQueueReservationInterface* _r)
        {
            _r->mRef.fetch_add(1, boost::memory_order_relaxed);
        }
        friend void intrusive_ptr_release(OpQueueReservationInterface* _r)
        {
            if (_r->mRef.fetch_sub(1, boost::memory_order_release) == 1)
            {
                boost::atomic_thread_fence(boost::memory_order_acquire);
                _r->dispose();
            }
        }
};

typedef boost::intrusive_ptr<OpQueueReservationInterface>   OpQueueReservationPtr;

