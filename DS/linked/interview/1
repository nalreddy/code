#include<iostream>
using namespace std;

// Definition for singly-linked list.
  struct ListNode {
      int val;
       ListNode *next;
       ListNode() : val(0), next(nullptr) {}
       ListNode(int x) : val(x), next(nullptr) {}
       ListNode(int x, ListNode *next) : val(x), next(next) {}
  };

class Solution {
	private:
		int nodeCount(ListNode* head) {
			ListNode* cur = head;
			int count = 0;
			while(cur) {
				count++;
				cur = cur->next;
			}
			return count;
		}
	public:
		void push(ListNode** head_ref, int new_data)
		{
			/* Allocate node */
			ListNode* new_node = (ListNode*)malloc(sizeof(ListNode));

			/* Put in the data */
			new_node->val = new_data;

			/* link the old list off the new node */
			new_node->next = (*head_ref);

			/* move the head to point to the new node */
			(*head_ref) = new_node;
		}

		ListNode* makeList(Listnode* list) {
			ListNode* tlist;

			if (list == nullptr) {
				return nullptr;
			}

			while(list) {
				push(&tlist, list->val);
				list = list->next;
			}
			return tlist;
		}

		ListNode* merge(ListNode* list1, ListNode* list2) {
			ListNode* tempList;

			if (list1 == nullptr) {
				return makeList(list2);
			}
			if (list2 == nullptr) {
				return makeList(list1);
			}

			while (list1 != nullptr || list2 != nullptr) {
				if (list1 && list2) {
					if (list1->val < list2->val) {
						push(&tempList, list1->val);
						list1 = list1->next;
					} else {
						push(&tempList, list2->val);
						list2 = list2->next;
					}
				}
				if (list1 == nullptr) {
					push(&tempList, list2->val);
					list2 = list2->next;
				} else {
					push(&tempList, list1->val);
					list1 = list1->next;
				}
			}
			return tempList;
		}

		void print(struct ListNode* head) {
			ListNode* cur = head;

			if (head == nullptr) {
				return;
			}
			while(cur) {
				cout << cur->val << "  ";
				cur = cur->next;
			}
			cout<<endl;
		}
};

int main() {
	Solution s;
	ListNode* head1 = nullptr;
	s.push(&head1, 2);
	s.push(&head1, 11);
	s.push(&head1, 15);
	s.push(&head1, 35);
	s.print(head1);

	ListNode* head2 = nullptr;
	s.push(&head2, 10);
	s.push(&head2, 13);
	s.push(&head2, 18);
	s.push(&head2, 26);
	s.push(&head2, 36);
	s.print(head2);

	ListNode* head3 = nullptr;

	head3 = s.merge(head1, head2);

	s.print(head3);

	return 0;
}
