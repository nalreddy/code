#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <string.h>

struct Student {
    uint64_t mVolume       : 4;
    uint64_t mTier         : 3;
    uint64_t mSize         : 3;
    uint64_t mMiniVolumeId : 3;
    uint64_t mAllocCount   : 3;
    bool     mExtention    : 1;
    uint64_t mUnUsed       : 47;

};

int getSize(struct Student st)
{
    int temp = 0;
    if (st.mExteontion)
    {
        temp = mSize << 1;
        return temp | 1; 
    }
    else
    {
        return mSize;
    }
}
const char *byte_to_binary(uint8_t x)
{
    static char b[9];
    b[0] = '\0';

    int z;
    for (z = 128; z > 0; z >>= 1)
    {
        strcat(b, ((x & z) == z) ? "1" : "0");
    }

    return b;
}

int main () {
#if 0
    FILE *of;
    of= fopen ("c1.txt", "w");
    if (of == NULL) {
        fprintf(stderr, "\nError to open the file\n");
        exit (1);
    }
    struct Student inp1 = {2, 1, 3, 3, 5};
    fwrite (&inp1, sizeof(struct Student), 1, of);
    if(fwrite != 0)
        printf("Contents to file written successfully !\n");
    else
        printf("Error writing file !\n");
    fclose (of);

    FILE *inf;
    struct Student inp;
    inf = fopen ("c1.txt", "r");
    if (inf == NULL) {
        fprintf(stderr, "\nError to open the file\n");
        exit (1);
    }

    while(fread(&inp, sizeof(struct Student), 1, inf))
        printf ("= %d = %d = %d = %d = %d \n", inp.mVolume, inp.mTier, inp.mSize, inp.mMiniVolumeId, inp.mAllocCount);


#else
    FILE *inf;
    struct Student inp;
    inf = fopen ("c1.txt", "r");
    if (inf == NULL) {
        fprintf(stderr, "\nError to open the file\n");
        exit (1);
    }

    while(fread(&inp, sizeof(struct Student), 1, inf))
        printf ("= %d = %d = %d = %d = %d \n", inp.mVolume, inp.mTier, inp.mSize, inp.mMiniVolumeId, inp.mAllocCount);

/*
    char *ptr = (char*)&inp;
    for(int i =0 ; i < 8; i++)
    {
        printf("%s\n " , byte_to_binary(*(ptr +i)));
    }
    */
    fclose (inf);
#endif
}
